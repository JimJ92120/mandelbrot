(()=>{"use strict";var t={858:(t,e,n)=>{t.exports=n.p+"0e77d795f520527604a8.wasm"}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,n),o.exports}n.m=t,n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var i=e.getElementsByTagName("script");i.length&&(t=i[i.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.b=document.baseURI||self.location.href,(()=>{let t;const e=new Array(32).fill(void 0);e.push(void 0,null,!0,!1);let i=e.length;function r(t){i===e.length&&e.push(e.length+1);const n=i;return i=e[n],e[n]=t,n}function o(t){return e[t]}function s(t){const n=o(t);return function(t){t<36||(e[t]=i,i=t)}(t),n}const a=new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0});a.decode();let c=new Uint8Array;class h{static __wrap(t){const e=Object.create(h.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const e=this.__destroy_into_raw();t.__wbg_mandelbrot_free(e)}constructor(e,n,i){const r=t.mandelbrot_new(e,n,i);return h.__wrap(r)}get data(){return s(t.mandelbrot_data(this.ptr))}generate_set(){t.mandelbrot_generate_set(this.ptr)}}function u(){const e={wbg:{}};return e.wbg.__wbindgen_memory=function(){return r(t.memory)},e.wbg.__wbg_buffer_3f3d764d4747d564=function(t){return r(o(t).buffer)},e.wbg.__wbg_newwithbyteoffsetandlength_be22e5fcf4f69ab4=function(t,e,n){return r(new Float32Array(o(t),e>>>0,n>>>0))},e.wbg.__wbindgen_object_drop_ref=function(t){s(t)},e.wbg.__wbg_new_4d6520efe4ca3e24=function(t){return r(new Float32Array(o(t)))},e.wbg.__wbindgen_throw=function(e,n){throw new Error((i=e,r=n,a.decode((0===c.byteLength&&(c=new Uint8Array(t.memory.buffer)),c).subarray(i,i+r))));var i,r},e}async function l(e){void 0===e&&(e=new URL(n(858),n.b));const i=u();("string"==typeof e||"function"==typeof Request&&e instanceof Request||"function"==typeof URL&&e instanceof URL)&&(e=fetch(e));const{instance:r,module:o}=await async function(t,e){if("function"==typeof Response&&t instanceof Response){if("function"==typeof WebAssembly.instantiateStreaming)try{return await WebAssembly.instantiateStreaming(t,e)}catch(e){if("application/wasm"==t.headers.get("Content-Type"))throw e;console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",e)}const n=await t.arrayBuffer();return await WebAssembly.instantiate(n,e)}{const n=await WebAssembly.instantiate(t,e);return n instanceof WebAssembly.Instance?{instance:n,module:t}:n}}(await e,i);return function(e,n){return t=e.exports,l.__wbindgen_wasm_module=n,c=new Uint8Array,t}(r,o)}const d=l;function f(t,e,n){const i=t.createShader(e);return i?(t.shaderSource(i,n),t.compileShader(i),function(t,e){return t.getShaderParameter(e,WebGL2RenderingContext.COMPILE_STATUS)}(t,i)?i:(console.error(t.getShaderInfoLog(i)),t.deleteShader(i),null)):null}const g=function(t,e,n){return{vertexShader:f(t,WebGL2RenderingContext.VERTEX_SHADER,e),fragmentShader:f(t,WebGL2RenderingContext.FRAGMENT_SHADER,n)}},m=function(t,e,n){const i=t.createProgram();return i?(t.attachShader(i,e),t.attachShader(i,n),t.linkProgram(i),function(t,e){return t.getProgramParameter(e,WebGL2RenderingContext.LINK_STATUS)}(t,i)?i:(console.error(t.getProgramInfoLog(i)),t.deleteProgram(i),null)):null},p=function(t,e){const n=t.createBuffer();return n?(t.bindBuffer(WebGL2RenderingContext.ARRAY_BUFFER,n),t.bufferData(WebGL2RenderingContext.ARRAY_BUFFER,e,WebGL2RenderingContext.STATIC_DRAW),n):null};class _{constructor(t){this.context=null,this.resolution=[0,0],this.dimension=[0,0],this.shaders=[null,null],this.program=null,this.vertexSize=2,this.setCanvas(t),this.setContext(),this.context&&(this.setResolution(),this.setDimension(),this.resize(),this.setShaders(),this.setProgram(),this.setUniforms())}setCanvas(t){this.canvas=document.getElementById(t)}setContext(){this.context=this.canvas.getContext("webgl2")}setResolution(){const t=this.canvas.getBoundingClientRect(),{height:e,width:n}=t;this.resolution=[Math.ceil(n/2),Math.ceil(e/2)]}setDimension(){this.dimension=[2*this.resolution[0],2*this.resolution[1]]}resize(){var t;this.canvas.width=this.dimension[0],this.canvas.height=this.dimension[1],null===(t=this.context)||void 0===t||t.viewport(0,0,this.dimension[0],this.dimension[1])}clearColor(){this.context&&(this.context.clearColor(0,0,0,1),this.context.clear(WebGL2RenderingContext.COLOR_BUFFER_BIT))}setShaders(){if(this.context){const{vertexShader:t,fragmentShader:e}=g(this.context,"#version 300 es\n  precision highp float;\n\n  uniform float u_pointSize;\n  uniform vec2 u_dimension;\n\n  in vec2 a_position;\n\n  void main() {\n    // offset to keep set centered\n    vec2 position = (a_position + vec2(0.75, 0.0));\n    float aspect = u_dimension[1] / u_dimension[0];\n    vec2 scale = vec2(aspect, 1);\n\n    // if height larger than width\n    if (u_dimension[0] < u_dimension[1]) {\n      scale = scale * (u_dimension[0] / u_dimension[1]);\n      position = position * vec2(0.75, 0.75);\n    }\n\n    gl_Position = vec4(position * scale, 0.0, 1.0);\n    gl_PointSize = u_pointSize;\n  }\n","#version 300 es\n  precision mediump float;\n\n  out vec4 FragColor;\n\n  void main() {\n    FragColor = vec4(1, 0, 0, 1);\n  }\n");this.shaders=[t,e]}}setProgram(){this.context&&this.shaders[0]&&this.shaders[1]&&(this.program=m(this.context,this.shaders[0],this.shaders[1]))}setUniforms(){if(this.context&&this.program){const t=this.context.getUniformLocation(this.program,"u_pointSize"),e=this.context.getUniformLocation(this.program,"u_dimension");this.context.useProgram(this.program),this.context.uniform1f(t,2),this.context.uniform2fv(e,this.dimension)}}draw(t){if(this.context&&this.program){this.clearColor();const e=p(this.context,t);this.context.bindBuffer(this.context.ARRAY_BUFFER,e),this.context.enableVertexAttribArray(this.context.getAttribLocation(this.program,"a_position")),this.context.vertexAttribPointer(0,this.vertexSize,WebGL2RenderingContext.FLOAT,!1,0,0),this.context.drawArrays(this.context.POINTS,0,t.length/this.vertexSize)}}}window.addEventListener("load",(()=>{d().then((()=>{const t=new _("scene"),e=new h(t.dimension[0],t.dimension[1],50);t.draw(e.data)}))}))})()})();